What is Raspbian?
Raspbian is an unofficial port of Debian wheezy armhf with compilation settings adjusted to produce code that uses "hardware floating point", the "hard float" ABI and will run on the Raspberry Pi.
The port is necessary because the official Debian wheezy armhf release is compatible only with versions of the ARM architecture later than the one used on the Raspberry Pi (ARMv7-A CPUs and higher, vs the Raspberry Pi's ARMv6 CPU).
The Debian squeeze image issued by the Raspberry Pi foundation was based on debian armel which uses software floating point and the "soft float" ABI. The foundation used the existing Debian port for less capable ARM devices. Therefore, it did not use of the Pi's processor's floating point hardware - reducing the Pi's performance during floating point intensive applications - or the advanced instructions of the ARMv6 CPU.

What do you mean by "soft float ABI" and "hard float ABI"?
ABI stands for application binary interface. The term has slightly different meanings in different contexts but in this context it refers to the set of rules used to set up registers and the stack when calling and returning from functions and other details that are required for binaries to be compatible with each other.
The "soft float" ABI passes floating point parameters in integer registers while the "hard float ABI" passes them in vfp (floating point) registers. The two ABIs are not compatible because they use different registers. It is possible to use hardware floating point with the soft-float ABI but doing so means that whenever a floating point value is passed to or returned from a function it must be transferred to an integer register incurring a performance penalty


dpkg --print-architecture
will output the primary architecture of the machine it's run on. This will be armhf on a machine running 32-bit ARM Debian or Ubuntu (or a derivative), arm64 on a machine running 64-bit ARM.
Note that the running architecture may be different from the hardware architecture or even the kernel architecture. It's possible to run i386 Debian on a 64-bit Intel or AMD CPU, and I believe it's possible to run armhf on a 64-bit ARM CPU. It's even possible to have mostly i386 binaries (so the primary architecture is i386) on an amd64 kern


[ui]
username = Your Name <your@email.address>
merge = kdiff3

[merge-tools]
kdiff3.args = $base $local $other -o $output
kdiff3.premerge = true

[auth]
finroc_org.prefix = https://finroc.org/hg
finroc_org.username = anonymous
finroc_org.password = your@email.address
Configuring the merge tool is optional, but our recommendation.

If you did not install the Ubuntu packages mentioned above, a hostfingerprints entry is currently needed in the ~/.hgrc (until the server gets a properly assured SSL certificate):
[hostfingerprints]
finroc.org = AD:C4:C9:99:88:71:EF:BD:75:09:1A:AC:89:06:7A:8F:7B:F4:15:AD



// This is tested successfully.
arasdar@ubuntu-desktop:~/finroc-app$ sudo ln -s /usr/bin/llvm-config-3.8 /usr/local/bin/llvm-config
sudo apt-get install llvm clang libclang-dev
The first two is for compiling CLANGuage and last one for AST/AST.h for enumstring

$ git clone git://git.drogon.net/wiringPi
sudo ./build

https://bitbucket.org/Mongo/canfestival-3-asc
libpcan for can-peak

http://www.finroc.org/browser/make_builder/etc/fetchlibs/ubuntu/10.04/fetch-Newton.sh?rev=410

https://developer.nvidia.com/cuda-downloads


Installing finroc from scratch and installing all the independecies:
First of all, we should clone/check out finroc from finroc.org repository.
To do this, serverkey from ubuntu is required:
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 5C9E0513

After checkingout/ cloning finroc:
the key for repository is also needed to start checking out other components inside finroc.
