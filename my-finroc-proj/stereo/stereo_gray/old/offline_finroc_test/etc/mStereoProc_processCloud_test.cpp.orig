


#include "projects/icarus/sensor_processing/stereo_gray/offline_finroc_test/mStereoGrayOffline.h"

using namespace finroc::icarus::sensor_processing::stereo_gray::offline_test;

//compareSegments(y_min, y_max,
//      dominant_ground_centroid, dominant_ground_plane_params,
//      centroids, model_coefficients); //model_coefficients

//void mStereoGrayOffline::smallSegments(const float y_min, const float y_max,
//                   const Eigen::Vector4f dom_centroid, const Eigen::Vector4f dom_plane_params,
//                   const vector<Eigen::Vector4f, Eigen::aligned_allocator<Eigen::Vector4f>> centroids,
//                   const vector<ModelCoefficients> model_coefficients)

void mStereoGrayOffline::smallSegments()
{

}



//void mStereoGrayOffline::extractPieces()
//{
//
//}

void
mStereoGrayOffline::processCloud_test(const CloudConstPtr& cloud, const CloudConstPtr& cloud_disp)
{
  /*Compute the normals*/
  pcl::PointCloud<pcl::Normal>::Ptr normal_cloud(new pcl::PointCloud<pcl::Normal>);
  ne.setInputCloud(cloud); //input
  ne.compute(*normal_cloud); //output

  /*Set up the ground plane comparator*/
  road_comparator->setInputCloud(cloud);
  road_comparator->setInputNormals(normal_cloud);

  /*Run segmentation*/
  pcl::PointCloud<pcl::Label> labels;
  std::vector<pcl::PointIndices> region_indices;
  road_segmentation.setInputCloud(cloud);
  road_segmentation.segment(labels, region_indices);

  /*! Draw the segmentation result*/
  pcl::PointCloud<pcl::PointXYZ>::Ptr ground_cloud(new pcl::PointCloud<pcl::PointXYZ>);
  CloudPtr ground_image(new Cloud);
  CloudPtr label_image(new Cloud);
  *ground_image = *cloud;
  *label_image = *cloud;

  CloudPtr disp_image(new Cloud);
  *disp_image = *cloud_disp;

  std::vector<pcl::ModelCoefficients> model_coefficients;
  std::vector<Eigen::Vector4f, Eigen::aligned_allocator<Eigen::Vector4f>> centroids;

  std::vector<int> region_indices_size;
  for (unsigned int i = 0; i < region_indices.size(); i++)
  {
    region_indices_size.push_back(region_indices[i].indices.size());
  }
  std::sort(region_indices_size.begin(), region_indices_size.end());  //from small to big descending order

  /* finding dominant segmented plane for more accuracy, speed and almost eliminating the for loop :) */
  unsigned int dominant_size = region_indices_size.at(region_indices_size.size() - 1);
  unsigned thresh = 100; //min inliers in segmented components
  Eigen::Vector4f dominant_ground_normal(1.0, 0.0, 0.0, 1.0);
  Eigen::Vector4f dominant_ground_centroid(0.0, 0.0, 0.0, 0.0);
  vector<float> dominant_y;

  /*! traversable regions - green*/
  for (unsigned int i = 0; i < region_indices.size(); i++) //only looking max value
  {

    /*looking for only the largest region*/
    //if (region_indices[i].indices.size() == largest_1 && largest_1 >= threshold_min_dominant_plane_cloud) //100 original //min_inliers - green -- for each segment 1000 original
    if (region_indices[i].indices.size() > thresh)
    {

      /*! Compute plane info*/
      Eigen::Vector4f clust_centroid = Eigen::Vector4f::Zero();
      Eigen::Matrix3f clust_cov;
      pcl::computeMeanAndCovarianceMatrix(*cloud, region_indices[i].indices, clust_cov, clust_centroid);

      EIGEN_ALIGN16 Eigen::Vector3f::Scalar eigen_value;
      EIGEN_ALIGN16 Eigen::Vector3f eigen_vector;
      pcl::eigen33(clust_cov, eigen_value, eigen_vector);
      Eigen::Vector4f plane_params;
      plane_params[0] = eigen_vector[0];
      plane_params[1] = eigen_vector[1];
      plane_params[2] = eigen_vector[2];
      plane_params[3] = 0;

      pcl::ModelCoefficients model;
      model.values.resize(4);
      model.values[0] = plane_params[0];
      model.values[1] = plane_params[1];
      model.values[2] = plane_params[2];
      model.values[3] = plane_params[3];

      if (region_indices[i].indices.size() == dominant_size && dominant_size > 1000)
      {
        dominant_ground_normal = plane_params;
        dominant_ground_centroid = clust_centroid;
        FINROC_LOG_PRINT(DEBUG_VERBOSE_1, "eigen value for dominant: ", eigen_value);

        /* colorizing the dominant plane in point cloud */ /*! traversable regions - green*/
        for (unsigned int j = 0; j < region_indices[i].indices.size(); j++)
        {
          unsigned color = 255;
          ground_image->points[region_indices[i].indices[j]].g = color; //static_cast<uint8_t>((cloud->points[region_indices[i].indices[j]].g + 255) / 2);
          disp_image->points[region_indices[i].indices[j]].g = color;
          label_image->points[region_indices[i].indices[j]].r = 0;
          label_image->points[region_indices[i].indices[j]].g = color;
          label_image->points[region_indices[i].indices[j]].b = 0;

          /*! finding the min and max height*/
          dominant_y.push_back(ground_image->points[region_indices[i].indices[j]].y);

        }// for


      }
      else
      {
        model_coefficients.push_back(model);
        centroids.push_back(clust_centroid);

        /* colorizing the other segments in point cloud */ /*! traversable regions - green*/
        for (unsigned int j = 0; j < region_indices[i].indices.size(); j++)
        {
          unsigned color = 200;
          ground_image->points[region_indices[i].indices[j]].g = color; //static_cast<uint8_t>((cloud->points[region_indices[i].indices[j]].g + 255) / 2);
          disp_image->points[region_indices[i].indices[j]].g = color;
          label_image->points[region_indices[i].indices[j]].r = 0;
          label_image->points[region_indices[i].indices[j]].g = color;
          label_image->points[region_indices[i].indices[j]].b = 0;
        }// for

      }

    } //if region
  }// for i REGION INDICES

  float y_min = *min_element(dominant_y.begin(), dominant_y.end());
  float y_max = *max_element(dominant_y.begin(), dominant_y.end());
  FINROC_LOG_PRINT(DEBUG, "y_min: ", y_min , "  y_max: ", y_max);


  /*! Filtering test*/
  pcl::PassThrough<PointT> pass;
  pass.setInputCloud(disp_image);
  pass.setFilterFieldName("y");
  float step_max = 0.30;
  pass.setFilterLimits(y_min - step_max, y_max);
  CloudPtr disp_image_filtered(new Cloud);
  pass.filter(*disp_image_filtered);
  cout << "ground points size: " << disp_image_filtered->points.size() << endl;

  unsigned int thresh_ground = (cloud->width / 10) * (cloud->height / 10) * 1.5 * 10;
  cout << "threshold for dominant ground cloud inliers: " << thresh_ground << endl; //333023 )// testing the thresh and enough points

  bool enoughPoints = true;
  if (disp_image_filtered->size() < thresh_ground) //5000 =~ 80 * 60 = 4800
  {
    cout << "not enough points in ground : " << disp_image_filtered->size() << endl;
    enoughPoints = false;
  }

  /*! Updated from now on to continue processing the cloud if we have dominant plane with enough inlying points*/
  if (enoughPoints)
  {

    prev_enoughPoints = enoughPoints;
    prev_region_indices = region_indices; //this should be done by memecpy
    prev_ground_ymin = y_min;
    prev_ground_ymax = y_max;


//    /*! comparing other smaller segments to the dominant segment in the filtered areas*/
//    smallSegments(y_min, y_max,
//        dominant_ground_centroid, dominant_ground_plane_params,
//        centroids, model_coefficients); //also region indices and enough points
//
//    extractPieces(); //filtered cloud and extracting the remaining pieces like segmentation
//    //enught points

  }


  /*! Note the NAN points in the image as well*/
  for (unsigned int i = 0; i < cloud->points.size(); i++)
  {
    if (!pcl::isFinite(cloud->points[i]))
    {
      ground_image->points[i].b = static_cast<uint8_t>((cloud->points[i].b + 255) / 2);
      label_image->points[i].r = 0;
      label_image->points[i].g = 0;
      label_image->points[i].b = 255;
    }
  }

  /*! Update info for the visualization thread*/
  if (enoughPoints || images_idx == 0) //updated if enough points
  {
    cloud_mutex.lock();
    prev_cloud = cloud;
    prev_normal_cloud = normal_cloud;
    prev_ground_cloud = ground_cloud;
    prev_ground_image = ground_image;
    prev_disp_image = disp_image_filtered;//disp_image;
    prev_label_image = label_image;
    prev_ground_normal = dominant_ground_normal;
    prev_ground_centroid = dominant_ground_centroid;
    cloud_mutex.unlock();
  }

}
